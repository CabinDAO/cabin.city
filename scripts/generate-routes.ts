import fs from 'fs'
import path from 'path'

// Function to scan directories recursively
function scanDir(dir: string, basePath = '') {
  let routes: string[] = []

  fs.readdirSync(dir).forEach((filename: string) => {
    const fullPath = path.join(dir, filename)
    const stat = fs.statSync(fullPath)

    if (stat.isDirectory()) {
      // Recurse into subdirectories
      routes = routes.concat(scanDir(fullPath, `${basePath}/${filename}`))
    } else if (
      !filename.includes('[[') &&
      (filename.endsWith('.js') ||
        filename.endsWith('.ts') ||
        filename.endsWith('.tsx'))
    ) {
      const routeName = filename.replace(/\.(t|j)sx?$/, '')

      if (routeName === 'index') {
        routes.push(basePath || '/')
      } else if (routeName === '404' || routeName.startsWith('_')) {
        // skip these
      } else {
        routes.push(`${basePath}/${routeName}`)
      }
    }
  })

  return routes
}

const pagesDir = path.join(__dirname, '..', 'pages')

const paths = scanDir(pagesDir)
const routes = paths
  .map((route) => {
    const name =
      route
        .replace(/\//g, '_')
        .replace(/^_+/, '')
        .replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())
        .replace(/[\[\]]/g, '') || 'home'
    return `  ${name} = "${route}"`
  })
  .join(',\n')

const fileContent = `// generated by ${__filename.replace(
  __dirname + '/',
  ''
)}. run \`npm run generate-routes\` to update.\nexport enum Routes {\n${routes}\n}`
fs.writeFileSync(
  path.join(__dirname, '..', 'generated', 'routes.ts'),
  fileContent
)

console.log(`Generated ${paths.length} routes to generated/routes.ts`)
