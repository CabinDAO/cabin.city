type Query {
  me: Profile! @resolver(name: "me")

  accountByAddress(address: String!): Account
    @resolver(name: "account_by_address")
  syncAttemptByKeyAndStatus(
    key: String!
    status: BlockSyncAttemptStatus!
  ): BlockSyncAttempt
  syncAttemptsByKey(key: String!): [BlockSyncAttempt!]!
  allAccounts: [Account!]!
  allProfiles: [Profile!]!
  allHats: [Hat!]!
  allBadges: [OtterspaceBadge!]!
  allActivities: [ActivityItem!]!
    @resolver(name: "all_activities", paginated: true)

  profilesCount(input: GetProfilesInput): Int! @resolver(name: "profiles_count")
  tokenHoldersCount: Int! @resolver(name: "token_holders_count")
  offersCount(input: GetOffersInput): Int! @resolver(name: "offers_count")
  citizensCount(status: CitizenshipStatus!): Int!
    @resolver(name: "profiles_by_citizenship_status_count")

  getProfiles(input: GetProfilesInput!): [Profile!]!
    @resolver(name: "get_profiles", paginated: true)
  activitiesByProfile(profileId: ID!): [ActivityItem!]!
    @resolver(name: "get_activities_by_profile", paginated: true)
  myVouchesThisYear: Int! @resolver(name: "my_vouches_this_year")
  locationsByLocationType(locationType: LocationType!): [Location!]!
    @resolver(name: "get_locations_by_location_type", paginated: true)
  getOffers(input: GetOffersInput!): [Offer!]!
    @resolver(name: "get_offers", paginated: true)
  getLocationsByIds(ids: [ID!]!): [Location!]!
    @resolver(name: "get_locations_by_ids")
}

type Mutation {
  clearSyncAttempts(key: String!): Boolean!
    @resolver(name: "clear_sync_attempts")
  createProfile(data: ProfileInput!): Profile! @resolver(name: "create_profile")
  logTrackingEvent(key: String!): TrackingEvent!
    @resolver(name: "log_tracking_event")
  updateProfile(
    id: ID!
    data: UpdateProfileInput
    roleTypes: [ProfileRoleType!]
  ): Profile! @resolver(name: "update_profile")
  vouchProfile(id: ID!): Profile! @resolver(name: "vouch_profile")
  unvouchProfile(id: ID!): Profile! @resolver(name: "unvouch_profile")
  likeActivity(id: ID!): ActivityReaction! @resolver(name: "like_activity")
  unlikeActivity(id: ID!): ActivityReaction! @resolver(name: "unlike_activity")
  createTextActivity(text: String!): Activity!
    @resolver(name: "create_text_activity")
  createLocation: Location @resolver(name: "create_location")
  createOffer(data: CreateOfferInput!): Offer @resolver(name: "create_offer")
}

type Profile {
  createdAt: Time!
  name: String!
  email: String!
  bio: String
  location: String
  avatar: ProfileAvatar
  roles: [ProfileRole!]!
  citizenshipStatus: CitizenshipStatus
  contactFields: [ProfileContactField!]!
  account: Account! @relation # Should not be null until if/when email-only sign in is implemented
  trackingEvents: [TrackingEvent!]! @relation
  # Rounded balance with 0 decimals to support display and sorting
  cabinTokenBalanceInt: Int!
  badgeCount: Int!
  givenVouches: [ProfileVouch!] @relation(name: "givenVouches")
  receivedVouches: [ProfileVouch!] @relation(name: "receivedVouches")
  citizenshipMetadata: CitizenshipMetadata
  locations: [Location!] @relation
  locationVotes: [LocationVote!] @relation
  features: [String!]
}

type ProfileVouch {
  voucher: Profile! @relation(name: "givenVouches")
  vouchee: Profile! @relation(name: "receivedVouches")
}

type CitizenshipMetadata @embedded {
  tokenId: String!
  mintedAt: Time!
}

type ProfileAvatar @embedded {
  url: String!

  # NFT Metadata
  contractAddress: String
  title: String
  tokenId: String
  tokenUri: String
}

input ProfileInput {
  address: String!
  name: String!
  email: String!
  avatar: ProfileAvatarInput
}

input ProfileAvatarInput {
  url: String!
  contractAddress: String
  title: String
  tokenId: String
  tokenUri: String
}

type ProfileRole @embedded {
  hatId: String # Null if the role is not associated with a hat (e.g. Apprentice role)
  role: ProfileRoleType!
  level: ProfileRoleLevelType!
}

enum ProfileRoleType {
  Caretaker
  Builder
  Gatherer
  Naturalist
  Creator
  Resident
}

enum ProfileRoleLevelType {
  Apprentice
  Artisan
  Custodian
}

enum CitizenshipStatus {
  VouchRequested
  Vouched
  Verified
}

type ProfileContactField @embedded {
  type: ProfileContactFieldType!
  value: String!
}

enum ProfileContactFieldType {
  Email
  Discord
  Twitter
  Instagram
  LinkedIn
  Telegram
  Lens
  Website
}

input UpdateProfileInput {
  name: String
  email: String
  bio: String
  location: String
  contactFields: [ProfileContactFieldInput!]
  avatar: ProfileAvatarInput
}

input ProfileContactFieldInput {
  type: ProfileContactFieldType!
  value: String!
}

input GetProfilesInput @embedded {
  sort: ProfileSortType
  roleTypes: [ProfileRoleType!]!
  levelTypes: [ProfileRoleLevelType!]!
  citizenshipStatuses: [CitizenshipStatus!]!
  searchQuery: String
}

enum ProfileSortType {
  CreatedAtAsc
  CreatedAtDesc
  CabinBalanceAsc
  CabinBalanceDesc
  BadgeCountAsc
  BadgeCountDesc
}

type TrackingEvent {
  key: String!
  count: Int!
  profile: Profile! @relation
}

type Account {
  address: String! @index(name: "account_by_address_casefold")
  profile: Profile @relation # Null if the user has not created their profile yet
  # Raw token balance with 18 decimals
  cabinTokenBalance: String
  hats: [Hat!]! @relation
  badges: [OtterspaceBadge!]! @relation
}

type Hat {
  hatId: String! @unique
  details: String!
  imageUri: String
  level: Int!
  wearers: [Account!]! @relation
}

type OtterspaceBadge {
  badgeId: String! @unique
  createdAt: Time!
  account: Account! @relation
  spec: OtterspaceBadgeSpec! @relation
}

type OtterspaceBadgeSpec {
  specId: String! @unique
  name: String!
  description: String!
  image: String!
  badges: [OtterspaceBadge!]! @relation
}

type Activity {
  key: String! @unique # The unique key supports idempotency
  text: String
  timestamp: Time!
  type: ActivityType!
  profileRoleAdded: ProfileRoleType
  transactionId: String
  profile: Profile! @relation
  metadata: ActivityMetadata
  reactions: [ActivityReaction!]! @relation
  reactedByProfile(profileId: ID!): Boolean
    @resolver(name: "activity_reacted_by_profile")
}

type ActivityItem @embedded {
  activity: Activity!
  reactionCount: Int!
  hasReactionByMe: Boolean!
}

type ActivityMetadata @embedded {
  # ProfileBadgeAdded
  badge: OtterspaceBadge

  # ProfileRoleAdded
  profileRole: ProfileRole

  # VerifiedCitizenship
  citizenshipTokenId: String
}

type ActivityReaction {
  profile: Profile! @relation
  activity: Activity! @relation
}

enum ActivityType {
  ProfileCreated
  ProfileRoleAdded
  ProfileBadgeAdded
  VerifiedCitizenship
  Text
}

type BlockSyncAttempt {
  key: String!
  startBlock: String!
  endBlock: String!
  failedAttemptCount: Int
  status: BlockSyncAttemptStatus!
}

enum BlockSyncAttemptStatus {
  Pending
  Successful
  Failed
}

type Location {
  locationType: LocationType
  name: String
  tagline: String
  sleepCapacity: Int
  caretaker: Profile! @relation
  caretakerEmail: String
  publishedAt: Time
  offers: [Offer!] @relation
  offerCount: Int # Denormalized for more efficient queries
  mediaItems: [LocationMediaItem!]
  votes: [LocationVote!] @relation
  voteCount: Int # Denormalized for sorting
  internetSpeedMbps: Int
  address: LocationAddress
  bannerImageIpfsHash: String
  description: String # Rich text
  addressInfo: String # Rich text
}

enum LocationType {
  Outpost
  Neighborhood
}

type LocationAddress @embedded {
  lat: Float
  lng: Float
  formattedAddress: String
  streetNumber: String
  route: String # Street, e.g. Cascade Street
  routeShort: String # e.g. Cascade St
  locality: String # City
  admininstrativeAreaLevel1: String # State, e.g. Colorado
  admininstrativeAreaLevel1Short: String # e.g. CO
  country: String # e.g. Costa Rica
  countryShort: String #e.g. CR
  postalCode: String
}

type LocationVote {
  location: Location! @relation
  profile: Profile! @relation
  count: Int!
}

type LocationMediaItem @embedded {
  category: LocationMediaCategory!
  ipfsHash: String
}

enum LocationMediaCategory {
  Sleeping
  Working
  Features
}

type Offer {
  offerType: OfferType
  title: String
  description: String # Rich text
  startDate: Time
  endDate: Time
  location: Location! @relation
  locationType: LocationType! # Denormalized for sorting
  price: OfferPrice
  profileRoleConstraints: [ProfileRoleConstraint!]
  applicationUrl: String
  imageIpfsHash: String
  citizenshipRequired: Boolean
  minimunCabinBalance: Int
}

enum OfferType {
  PaidColiving
  Residency
  BuildAndGrowWeek
}

type OfferPrice @embedded {
  unit: OfferPriceUnit!
  amountCents: Int! # 2 decimal integer representation of the price (e.g. $100.00 = 10000)
}

enum OfferPriceUnit {
  FlatFee
  Hourly
  Daily
  Weekly
  Monthly
}

type ProfileRoleConstraint @embedded {
  profileRole: ProfileRoleType!
  level: ProfileRoleLevelType!
}

input ProfileRoleConstraintInput {
  profileRole: ProfileRoleType!
  level: ProfileRoleLevelType!
}

input GetOffersInput @embedded {
  offerTypes: [OfferType!]!
  profileRoleConstraints: [ProfileRoleConstraintInput!]!
}

input CreateOfferInput {
  offerType: OfferType!
  locationId: ID!
}
