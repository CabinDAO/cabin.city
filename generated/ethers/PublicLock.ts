/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PublicLockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "KEY_GRANTER_ROLE"
      | "LOCK_MANAGER_ROLE"
      | "addKeyGranter"
      | "addLockManager"
      | "approve"
      | "balanceOf"
      | "burn"
      | "cancelAndRefund"
      | "expirationDuration"
      | "expireAndRefundFor"
      | "extend"
      | "freeTrialLength"
      | "gasRefundValue"
      | "getApproved"
      | "getCancelAndRefundValue"
      | "getHasValidKey"
      | "getRoleAdmin"
      | "getTransferFee"
      | "grantKeyExtension"
      | "grantKeys"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "isKeyGranter"
      | "isLockManager"
      | "isOwner"
      | "isValidKey"
      | "keyExpirationTimestampFor"
      | "keyManagerOf"
      | "keyPrice"
      | "lendKey"
      | "maxKeysPerAddress"
      | "maxNumberOfKeys"
      | "mergeKeys"
      | "migrate"
      | "name"
      | "numberOfOwners"
      | "onKeyCancelHook"
      | "onKeyExtendHook"
      | "onKeyGrantHook"
      | "onKeyPurchaseHook"
      | "onKeyTransferHook"
      | "onTokenURIHook"
      | "onValidKeyHook"
      | "owner"
      | "ownerOf"
      | "publicLockVersion"
      | "purchase"
      | "purchasePriceFor"
      | "referrerFees"
      | "refundPenaltyBasisPoints"
      | "renewMembershipFor"
      | "renounceLockManager"
      | "renounceRole"
      | "revokeKeyGranter"
      | "revokeRole"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "schemaVersion"
      | "setApprovalForAll"
      | "setEventHooks"
      | "setGasRefundValue"
      | "setKeyManagerOf"
      | "setLockMetadata"
      | "setOwner"
      | "setReferrerFee"
      | "shareKey"
      | "supportsInterface"
      | "symbol"
      | "tokenAddress"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalKeys"
      | "totalSupply"
      | "transfer"
      | "transferFeeBasisPoints"
      | "transferFrom"
      | "unlendKey"
      | "unlockProtocol"
      | "updateKeyPricing"
      | "updateLockConfig"
      | "updateRefundPenalty"
      | "updateSchemaVersion"
      | "updateTransferFee"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "CancelKey"
      | "ExpirationChanged"
      | "ExpireKey"
      | "GasRefunded"
      | "Initialized"
      | "KeyExtended"
      | "KeyGranterAdded"
      | "KeyGranterRemoved"
      | "KeyManagerChanged"
      | "KeysMigrated"
      | "LockConfig"
      | "LockManagerAdded"
      | "LockManagerRemoved"
      | "LockMetadata"
      | "OwnershipTransferred"
      | "PricingChanged"
      | "RefundPenaltyChanged"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Transfer"
      | "TransferFeeChanged"
      | "UnlockCallFailed"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEY_GRANTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addKeyGranter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLockManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cancelAndRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expirationDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireAndRefundFor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extend",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freeTrialLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasRefundValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancelAndRefundValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHasValidKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantKeyExtension",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantKeys",
    values: [AddressLike[], BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isKeyGranter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLockManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyExpirationTimestampFor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyManagerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keyPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lendKey",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxKeysPerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumberOfKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeKeys",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "migrate", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyCancelHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyExtendHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyGrantHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyPurchaseHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyTransferHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenURIHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onValidKeyHook",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publicLockVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [
      BigNumberish[],
      AddressLike[],
      AddressLike[],
      AddressLike[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePriceFor",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "referrerFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundPenaltyBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewMembershipFor",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceLockManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeKeyGranter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schemaVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventHooks",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasRefundValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeyManagerOf",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockMetadata",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareKey",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalKeys",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlendKey",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyPricing",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLockConfig",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRefundPenalty",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSchemaVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransferFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEY_GRANTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKeyGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAndRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireAndRefundFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeTrialLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasRefundValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancelAndRefundValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHasValidKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantKeyExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKeyGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValidKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keyExpirationTimestampFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyManagerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxKeysPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNumberOfKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mergeKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyCancelHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyExtendHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyGrantHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyPurchaseHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyTransferHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenURIHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onValidKeyHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicLockVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundPenaltyBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewMembershipFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceLockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeKeyGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "schemaVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasRefundValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeyManagerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlendKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyPricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLockConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRefundPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSchemaVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelKeyEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    sendTo: AddressLike,
    refund: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    owner: string,
    sendTo: string,
    refund: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    sendTo: string;
    refund: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpirationChangedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    newExpiration: BigNumberish,
    amount: BigNumberish,
    timeAdded: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    newExpiration: bigint,
    amount: bigint,
    timeAdded: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    newExpiration: bigint;
    amount: bigint;
    timeAdded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExpireKeyEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GasRefundedEvent {
  export type InputTuple = [
    receiver: AddressLike,
    refundedAmount: BigNumberish,
    tokenAddress: AddressLike
  ];
  export type OutputTuple = [
    receiver: string,
    refundedAmount: bigint,
    tokenAddress: string
  ];
  export interface OutputObject {
    receiver: string;
    refundedAmount: bigint;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyExtendedEvent {
  export type InputTuple = [tokenId: BigNumberish, newTimestamp: BigNumberish];
  export type OutputTuple = [tokenId: bigint, newTimestamp: bigint];
  export interface OutputObject {
    tokenId: bigint;
    newTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyGranterAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyGranterRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyManagerChangedEvent {
  export type InputTuple = [_tokenId: BigNumberish, _newManager: AddressLike];
  export type OutputTuple = [_tokenId: bigint, _newManager: string];
  export interface OutputObject {
    _tokenId: bigint;
    _newManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeysMigratedEvent {
  export type InputTuple = [updatedRecordsCount: BigNumberish];
  export type OutputTuple = [updatedRecordsCount: bigint];
  export interface OutputObject {
    updatedRecordsCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockConfigEvent {
  export type InputTuple = [
    expirationDuration: BigNumberish,
    maxNumberOfKeys: BigNumberish,
    maxKeysPerAcccount: BigNumberish
  ];
  export type OutputTuple = [
    expirationDuration: bigint,
    maxNumberOfKeys: bigint,
    maxKeysPerAcccount: bigint
  ];
  export interface OutputObject {
    expirationDuration: bigint;
    maxNumberOfKeys: bigint;
    maxKeysPerAcccount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockManagerAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockManagerRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockMetadataEvent {
  export type InputTuple = [name: string, symbol: string, baseTokenURI: string];
  export type OutputTuple = [
    name: string,
    symbol: string,
    baseTokenURI: string
  ];
  export interface OutputObject {
    name: string;
    symbol: string;
    baseTokenURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PricingChangedEvent {
  export type InputTuple = [
    oldKeyPrice: BigNumberish,
    keyPrice: BigNumberish,
    oldTokenAddress: AddressLike,
    tokenAddress: AddressLike
  ];
  export type OutputTuple = [
    oldKeyPrice: bigint,
    keyPrice: bigint,
    oldTokenAddress: string,
    tokenAddress: string
  ];
  export interface OutputObject {
    oldKeyPrice: bigint;
    keyPrice: bigint;
    oldTokenAddress: string;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundPenaltyChangedEvent {
  export type InputTuple = [
    freeTrialLength: BigNumberish,
    refundPenaltyBasisPoints: BigNumberish
  ];
  export type OutputTuple = [
    freeTrialLength: bigint,
    refundPenaltyBasisPoints: bigint
  ];
  export interface OutputObject {
    freeTrialLength: bigint;
    refundPenaltyBasisPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferFeeChangedEvent {
  export type InputTuple = [transferFeeBasisPoints: BigNumberish];
  export type OutputTuple = [transferFeeBasisPoints: bigint];
  export interface OutputObject {
    transferFeeBasisPoints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockCallFailedEvent {
  export type InputTuple = [
    lockAddress: AddressLike,
    unlockAddress: AddressLike
  ];
  export type OutputTuple = [lockAddress: string, unlockAddress: string];
  export interface OutputObject {
    lockAddress: string;
    unlockAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenAddress: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    tokenAddress: string,
    recipient: string,
    amount: bigint
  ];
  export interface OutputObject {
    sender: string;
    tokenAddress: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PublicLock extends BaseContract {
  connect(runner?: ContractRunner | null): PublicLock;
  waitForDeployment(): Promise<this>;

  interface: PublicLockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  KEY_GRANTER_ROLE: TypedContractMethod<[], [string], "view">;

  LOCK_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  addKeyGranter: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  addLockManager: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [_approved: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[_keyOwner: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  cancelAndRefund: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  expirationDuration: TypedContractMethod<[], [bigint], "view">;

  expireAndRefundFor: TypedContractMethod<
    [_tokenId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  extend: TypedContractMethod<
    [
      _value: BigNumberish,
      _tokenId: BigNumberish,
      _referrer: AddressLike,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;

  freeTrialLength: TypedContractMethod<[], [bigint], "view">;

  gasRefundValue: TypedContractMethod<[], [bigint], "view">;

  getApproved: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getCancelAndRefundValue: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getHasValidKey: TypedContractMethod<
    [_keyOwner: AddressLike],
    [boolean],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTransferFee: TypedContractMethod<
    [_tokenId: BigNumberish, _time: BigNumberish],
    [bigint],
    "view"
  >;

  grantKeyExtension: TypedContractMethod<
    [_tokenId: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  grantKeys: TypedContractMethod<
    [
      _recipients: AddressLike[],
      _expirationTimestamps: BigNumberish[],
      _keyManagers: AddressLike[]
    ],
    [bigint[]],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _lockCreator: AddressLike,
      _expirationDuration: BigNumberish,
      _tokenAddress: AddressLike,
      _keyPrice: BigNumberish,
      _maxNumberOfKeys: BigNumberish,
      _lockName: string
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [_owner: AddressLike, _operator: AddressLike],
    [boolean],
    "view"
  >;

  isKeyGranter: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isLockManager: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isOwner: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isValidKey: TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;

  keyExpirationTimestampFor: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  keyManagerOf: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  keyPrice: TypedContractMethod<[], [bigint], "view">;

  lendKey: TypedContractMethod<
    [_from: AddressLike, _recipient: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  maxKeysPerAddress: TypedContractMethod<[], [bigint], "view">;

  maxNumberOfKeys: TypedContractMethod<[], [bigint], "view">;

  mergeKeys: TypedContractMethod<
    [
      _tokenIdFrom: BigNumberish,
      _tokenIdTo: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  migrate: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  numberOfOwners: TypedContractMethod<[], [bigint], "view">;

  onKeyCancelHook: TypedContractMethod<[], [string], "view">;

  onKeyExtendHook: TypedContractMethod<[], [string], "view">;

  onKeyGrantHook: TypedContractMethod<[], [string], "view">;

  onKeyPurchaseHook: TypedContractMethod<[], [string], "view">;

  onKeyTransferHook: TypedContractMethod<[], [string], "view">;

  onTokenURIHook: TypedContractMethod<[], [string], "view">;

  onValidKeyHook: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  publicLockVersion: TypedContractMethod<[], [bigint], "view">;

  purchase: TypedContractMethod<
    [
      _values: BigNumberish[],
      _recipients: AddressLike[],
      _referrers: AddressLike[],
      _keyManagers: AddressLike[],
      _data: BytesLike[]
    ],
    [bigint[]],
    "payable"
  >;

  purchasePriceFor: TypedContractMethod<
    [_recipient: AddressLike, _referrer: AddressLike, _data: BytesLike],
    [bigint],
    "view"
  >;

  referrerFees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  refundPenaltyBasisPoints: TypedContractMethod<[], [bigint], "view">;

  renewMembershipFor: TypedContractMethod<
    [_tokenId: BigNumberish, _referrer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceLockManager: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeKeyGranter: TypedContractMethod<
    [_granter: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  schemaVersion: TypedContractMethod<[], [bigint], "view">;

  setApprovalForAll: TypedContractMethod<
    [_to: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;

  setEventHooks: TypedContractMethod<
    [
      _onKeyPurchaseHook: AddressLike,
      _onKeyCancelHook: AddressLike,
      _onValidKeyHook: AddressLike,
      _onTokenURIHook: AddressLike,
      _onKeyTransferHook: AddressLike,
      _onKeyExtendHook: AddressLike,
      _onKeyGrantHook: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setGasRefundValue: TypedContractMethod<
    [_refundValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setKeyManagerOf: TypedContractMethod<
    [_tokenId: BigNumberish, _keyManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setLockMetadata: TypedContractMethod<
    [_lockName: string, _lockSymbol: string, _baseTokenURI: string],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  setReferrerFee: TypedContractMethod<
    [_referrer: AddressLike, _feeBasisPoint: BigNumberish],
    [void],
    "nonpayable"
  >;

  shareKey: TypedContractMethod<
    [_to: AddressLike, _tokenIdFrom: BigNumberish, _timeShared: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[_index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [_keyOwner: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  totalKeys: TypedContractMethod<[_keyOwner: AddressLike], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike, _valueBasisPoint: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFeeBasisPoints: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [_from: AddressLike, _recipient: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlendKey: TypedContractMethod<
    [_recipient: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlockProtocol: TypedContractMethod<[], [string], "view">;

  updateKeyPricing: TypedContractMethod<
    [_keyPrice: BigNumberish, _tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLockConfig: TypedContractMethod<
    [
      _newExpirationDuration: BigNumberish,
      _maxNumberOfKeys: BigNumberish,
      _maxKeysPerAcccount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateRefundPenalty: TypedContractMethod<
    [_freeTrialLength: BigNumberish, _refundPenaltyBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSchemaVersion: TypedContractMethod<[], [void], "nonpayable">;

  updateTransferFee: TypedContractMethod<
    [_transferFeeBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _recipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "KEY_GRANTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LOCK_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addKeyGranter"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addLockManager"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_approved: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_keyOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelAndRefund"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "expirationDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "expireAndRefundFor"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "extend"
  ): TypedContractMethod<
    [
      _value: BigNumberish,
      _tokenId: BigNumberish,
      _referrer: AddressLike,
      _data: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "freeTrialLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasRefundValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCancelAndRefundValue"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHasValidKey"
  ): TypedContractMethod<[_keyOwner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTransferFee"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _time: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantKeyExtension"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantKeys"
  ): TypedContractMethod<
    [
      _recipients: AddressLike[],
      _expirationTimestamps: BigNumberish[],
      _keyManagers: AddressLike[]
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _lockCreator: AddressLike,
      _expirationDuration: BigNumberish,
      _tokenAddress: AddressLike,
      _keyPrice: BigNumberish,
      _maxNumberOfKeys: BigNumberish,
      _lockName: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [_owner: AddressLike, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isKeyGranter"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLockManager"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidKey"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "keyExpirationTimestampFor"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "keyManagerOf"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "keyPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lendKey"
  ): TypedContractMethod<
    [_from: AddressLike, _recipient: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxKeysPerAddress"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxNumberOfKeys"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mergeKeys"
  ): TypedContractMethod<
    [
      _tokenIdFrom: BigNumberish,
      _tokenIdTo: BigNumberish,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "migrate"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "numberOfOwners"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onKeyCancelHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onKeyExtendHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onKeyGrantHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onKeyPurchaseHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onKeyTransferHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onTokenURIHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onValidKeyHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "publicLockVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchase"
  ): TypedContractMethod<
    [
      _values: BigNumberish[],
      _recipients: AddressLike[],
      _referrers: AddressLike[],
      _keyManagers: AddressLike[],
      _data: BytesLike[]
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "purchasePriceFor"
  ): TypedContractMethod<
    [_recipient: AddressLike, _referrer: AddressLike, _data: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "referrerFees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundPenaltyBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renewMembershipFor"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _referrer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceLockManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeKeyGranter"
  ): TypedContractMethod<[_granter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _to: AddressLike,
      _tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "schemaVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [_to: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEventHooks"
  ): TypedContractMethod<
    [
      _onKeyPurchaseHook: AddressLike,
      _onKeyCancelHook: AddressLike,
      _onValidKeyHook: AddressLike,
      _onTokenURIHook: AddressLike,
      _onKeyTransferHook: AddressLike,
      _onKeyExtendHook: AddressLike,
      _onKeyGrantHook: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGasRefundValue"
  ): TypedContractMethod<[_refundValue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKeyManagerOf"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _keyManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLockMetadata"
  ): TypedContractMethod<
    [_lockName: string, _lockSymbol: string, _baseTokenURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferrerFee"
  ): TypedContractMethod<
    [_referrer: AddressLike, _feeBasisPoint: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shareKey"
  ): TypedContractMethod<
    [_to: AddressLike, _tokenIdFrom: BigNumberish, _timeShared: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[_index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [_keyOwner: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalKeys"
  ): TypedContractMethod<[_keyOwner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _to: AddressLike, _valueBasisPoint: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFeeBasisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [_from: AddressLike, _recipient: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlendKey"
  ): TypedContractMethod<
    [_recipient: AddressLike, _tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateKeyPricing"
  ): TypedContractMethod<
    [_keyPrice: BigNumberish, _tokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLockConfig"
  ): TypedContractMethod<
    [
      _newExpirationDuration: BigNumberish,
      _maxNumberOfKeys: BigNumberish,
      _maxKeysPerAcccount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRefundPenalty"
  ): TypedContractMethod<
    [_freeTrialLength: BigNumberish, _refundPenaltyBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSchemaVersion"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTransferFee"
  ): TypedContractMethod<
    [_transferFeeBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      _tokenAddress: AddressLike,
      _recipient: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CancelKey"
  ): TypedContractEvent<
    CancelKeyEvent.InputTuple,
    CancelKeyEvent.OutputTuple,
    CancelKeyEvent.OutputObject
  >;
  getEvent(
    key: "ExpirationChanged"
  ): TypedContractEvent<
    ExpirationChangedEvent.InputTuple,
    ExpirationChangedEvent.OutputTuple,
    ExpirationChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExpireKey"
  ): TypedContractEvent<
    ExpireKeyEvent.InputTuple,
    ExpireKeyEvent.OutputTuple,
    ExpireKeyEvent.OutputObject
  >;
  getEvent(
    key: "GasRefunded"
  ): TypedContractEvent<
    GasRefundedEvent.InputTuple,
    GasRefundedEvent.OutputTuple,
    GasRefundedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "KeyExtended"
  ): TypedContractEvent<
    KeyExtendedEvent.InputTuple,
    KeyExtendedEvent.OutputTuple,
    KeyExtendedEvent.OutputObject
  >;
  getEvent(
    key: "KeyGranterAdded"
  ): TypedContractEvent<
    KeyGranterAddedEvent.InputTuple,
    KeyGranterAddedEvent.OutputTuple,
    KeyGranterAddedEvent.OutputObject
  >;
  getEvent(
    key: "KeyGranterRemoved"
  ): TypedContractEvent<
    KeyGranterRemovedEvent.InputTuple,
    KeyGranterRemovedEvent.OutputTuple,
    KeyGranterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "KeyManagerChanged"
  ): TypedContractEvent<
    KeyManagerChangedEvent.InputTuple,
    KeyManagerChangedEvent.OutputTuple,
    KeyManagerChangedEvent.OutputObject
  >;
  getEvent(
    key: "KeysMigrated"
  ): TypedContractEvent<
    KeysMigratedEvent.InputTuple,
    KeysMigratedEvent.OutputTuple,
    KeysMigratedEvent.OutputObject
  >;
  getEvent(
    key: "LockConfig"
  ): TypedContractEvent<
    LockConfigEvent.InputTuple,
    LockConfigEvent.OutputTuple,
    LockConfigEvent.OutputObject
  >;
  getEvent(
    key: "LockManagerAdded"
  ): TypedContractEvent<
    LockManagerAddedEvent.InputTuple,
    LockManagerAddedEvent.OutputTuple,
    LockManagerAddedEvent.OutputObject
  >;
  getEvent(
    key: "LockManagerRemoved"
  ): TypedContractEvent<
    LockManagerRemovedEvent.InputTuple,
    LockManagerRemovedEvent.OutputTuple,
    LockManagerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "LockMetadata"
  ): TypedContractEvent<
    LockMetadataEvent.InputTuple,
    LockMetadataEvent.OutputTuple,
    LockMetadataEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PricingChanged"
  ): TypedContractEvent<
    PricingChangedEvent.InputTuple,
    PricingChangedEvent.OutputTuple,
    PricingChangedEvent.OutputObject
  >;
  getEvent(
    key: "RefundPenaltyChanged"
  ): TypedContractEvent<
    RefundPenaltyChangedEvent.InputTuple,
    RefundPenaltyChangedEvent.OutputTuple,
    RefundPenaltyChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferFeeChanged"
  ): TypedContractEvent<
    TransferFeeChangedEvent.InputTuple,
    TransferFeeChangedEvent.OutputTuple,
    TransferFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "UnlockCallFailed"
  ): TypedContractEvent<
    UnlockCallFailedEvent.InputTuple,
    UnlockCallFailedEvent.OutputTuple,
    UnlockCallFailedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CancelKey(uint256,address,address,uint256)": TypedContractEvent<
      CancelKeyEvent.InputTuple,
      CancelKeyEvent.OutputTuple,
      CancelKeyEvent.OutputObject
    >;
    CancelKey: TypedContractEvent<
      CancelKeyEvent.InputTuple,
      CancelKeyEvent.OutputTuple,
      CancelKeyEvent.OutputObject
    >;

    "ExpirationChanged(uint256,uint256,uint256,bool)": TypedContractEvent<
      ExpirationChangedEvent.InputTuple,
      ExpirationChangedEvent.OutputTuple,
      ExpirationChangedEvent.OutputObject
    >;
    ExpirationChanged: TypedContractEvent<
      ExpirationChangedEvent.InputTuple,
      ExpirationChangedEvent.OutputTuple,
      ExpirationChangedEvent.OutputObject
    >;

    "ExpireKey(uint256)": TypedContractEvent<
      ExpireKeyEvent.InputTuple,
      ExpireKeyEvent.OutputTuple,
      ExpireKeyEvent.OutputObject
    >;
    ExpireKey: TypedContractEvent<
      ExpireKeyEvent.InputTuple,
      ExpireKeyEvent.OutputTuple,
      ExpireKeyEvent.OutputObject
    >;

    "GasRefunded(address,uint256,address)": TypedContractEvent<
      GasRefundedEvent.InputTuple,
      GasRefundedEvent.OutputTuple,
      GasRefundedEvent.OutputObject
    >;
    GasRefunded: TypedContractEvent<
      GasRefundedEvent.InputTuple,
      GasRefundedEvent.OutputTuple,
      GasRefundedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "KeyExtended(uint256,uint256)": TypedContractEvent<
      KeyExtendedEvent.InputTuple,
      KeyExtendedEvent.OutputTuple,
      KeyExtendedEvent.OutputObject
    >;
    KeyExtended: TypedContractEvent<
      KeyExtendedEvent.InputTuple,
      KeyExtendedEvent.OutputTuple,
      KeyExtendedEvent.OutputObject
    >;

    "KeyGranterAdded(address)": TypedContractEvent<
      KeyGranterAddedEvent.InputTuple,
      KeyGranterAddedEvent.OutputTuple,
      KeyGranterAddedEvent.OutputObject
    >;
    KeyGranterAdded: TypedContractEvent<
      KeyGranterAddedEvent.InputTuple,
      KeyGranterAddedEvent.OutputTuple,
      KeyGranterAddedEvent.OutputObject
    >;

    "KeyGranterRemoved(address)": TypedContractEvent<
      KeyGranterRemovedEvent.InputTuple,
      KeyGranterRemovedEvent.OutputTuple,
      KeyGranterRemovedEvent.OutputObject
    >;
    KeyGranterRemoved: TypedContractEvent<
      KeyGranterRemovedEvent.InputTuple,
      KeyGranterRemovedEvent.OutputTuple,
      KeyGranterRemovedEvent.OutputObject
    >;

    "KeyManagerChanged(uint256,address)": TypedContractEvent<
      KeyManagerChangedEvent.InputTuple,
      KeyManagerChangedEvent.OutputTuple,
      KeyManagerChangedEvent.OutputObject
    >;
    KeyManagerChanged: TypedContractEvent<
      KeyManagerChangedEvent.InputTuple,
      KeyManagerChangedEvent.OutputTuple,
      KeyManagerChangedEvent.OutputObject
    >;

    "KeysMigrated(uint256)": TypedContractEvent<
      KeysMigratedEvent.InputTuple,
      KeysMigratedEvent.OutputTuple,
      KeysMigratedEvent.OutputObject
    >;
    KeysMigrated: TypedContractEvent<
      KeysMigratedEvent.InputTuple,
      KeysMigratedEvent.OutputTuple,
      KeysMigratedEvent.OutputObject
    >;

    "LockConfig(uint256,uint256,uint256)": TypedContractEvent<
      LockConfigEvent.InputTuple,
      LockConfigEvent.OutputTuple,
      LockConfigEvent.OutputObject
    >;
    LockConfig: TypedContractEvent<
      LockConfigEvent.InputTuple,
      LockConfigEvent.OutputTuple,
      LockConfigEvent.OutputObject
    >;

    "LockManagerAdded(address)": TypedContractEvent<
      LockManagerAddedEvent.InputTuple,
      LockManagerAddedEvent.OutputTuple,
      LockManagerAddedEvent.OutputObject
    >;
    LockManagerAdded: TypedContractEvent<
      LockManagerAddedEvent.InputTuple,
      LockManagerAddedEvent.OutputTuple,
      LockManagerAddedEvent.OutputObject
    >;

    "LockManagerRemoved(address)": TypedContractEvent<
      LockManagerRemovedEvent.InputTuple,
      LockManagerRemovedEvent.OutputTuple,
      LockManagerRemovedEvent.OutputObject
    >;
    LockManagerRemoved: TypedContractEvent<
      LockManagerRemovedEvent.InputTuple,
      LockManagerRemovedEvent.OutputTuple,
      LockManagerRemovedEvent.OutputObject
    >;

    "LockMetadata(string,string,string)": TypedContractEvent<
      LockMetadataEvent.InputTuple,
      LockMetadataEvent.OutputTuple,
      LockMetadataEvent.OutputObject
    >;
    LockMetadata: TypedContractEvent<
      LockMetadataEvent.InputTuple,
      LockMetadataEvent.OutputTuple,
      LockMetadataEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PricingChanged(uint256,uint256,address,address)": TypedContractEvent<
      PricingChangedEvent.InputTuple,
      PricingChangedEvent.OutputTuple,
      PricingChangedEvent.OutputObject
    >;
    PricingChanged: TypedContractEvent<
      PricingChangedEvent.InputTuple,
      PricingChangedEvent.OutputTuple,
      PricingChangedEvent.OutputObject
    >;

    "RefundPenaltyChanged(uint256,uint256)": TypedContractEvent<
      RefundPenaltyChangedEvent.InputTuple,
      RefundPenaltyChangedEvent.OutputTuple,
      RefundPenaltyChangedEvent.OutputObject
    >;
    RefundPenaltyChanged: TypedContractEvent<
      RefundPenaltyChangedEvent.InputTuple,
      RefundPenaltyChangedEvent.OutputTuple,
      RefundPenaltyChangedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferFeeChanged(uint256)": TypedContractEvent<
      TransferFeeChangedEvent.InputTuple,
      TransferFeeChangedEvent.OutputTuple,
      TransferFeeChangedEvent.OutputObject
    >;
    TransferFeeChanged: TypedContractEvent<
      TransferFeeChangedEvent.InputTuple,
      TransferFeeChangedEvent.OutputTuple,
      TransferFeeChangedEvent.OutputObject
    >;

    "UnlockCallFailed(address,address)": TypedContractEvent<
      UnlockCallFailedEvent.InputTuple,
      UnlockCallFailedEvent.OutputTuple,
      UnlockCallFailedEvent.OutputObject
    >;
    UnlockCallFailed: TypedContractEvent<
      UnlockCallFailedEvent.InputTuple,
      UnlockCallFailedEvent.OutputTuple,
      UnlockCallFailedEvent.OutputObject
    >;

    "Withdrawal(address,address,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
