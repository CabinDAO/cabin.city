/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PublicLockInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KEY_GRANTER_ROLE()": FunctionFragment;
    "LOCK_MANAGER_ROLE()": FunctionFragment;
    "addKeyGranter(address)": FunctionFragment;
    "addLockManager(address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "cancelAndRefund(uint256)": FunctionFragment;
    "expirationDuration()": FunctionFragment;
    "expireAndRefundFor(uint256,uint256)": FunctionFragment;
    "extend(uint256,uint256,address,bytes)": FunctionFragment;
    "freeTrialLength()": FunctionFragment;
    "gasRefundValue()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCancelAndRefundValue(uint256)": FunctionFragment;
    "getHasValidKey(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTransferFee(uint256,uint256)": FunctionFragment;
    "grantKeyExtension(uint256,uint256)": FunctionFragment;
    "grantKeys(address[],uint256[],address[])": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,address,uint256,uint256,string)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isKeyGranter(address)": FunctionFragment;
    "isLockManager(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "isValidKey(uint256)": FunctionFragment;
    "keyExpirationTimestampFor(uint256)": FunctionFragment;
    "keyManagerOf(uint256)": FunctionFragment;
    "keyPrice()": FunctionFragment;
    "lendKey(address,address,uint256)": FunctionFragment;
    "maxKeysPerAddress()": FunctionFragment;
    "maxNumberOfKeys()": FunctionFragment;
    "mergeKeys(uint256,uint256,uint256)": FunctionFragment;
    "migrate(bytes)": FunctionFragment;
    "name()": FunctionFragment;
    "numberOfOwners()": FunctionFragment;
    "onKeyCancelHook()": FunctionFragment;
    "onKeyExtendHook()": FunctionFragment;
    "onKeyGrantHook()": FunctionFragment;
    "onKeyPurchaseHook()": FunctionFragment;
    "onKeyTransferHook()": FunctionFragment;
    "onTokenURIHook()": FunctionFragment;
    "onValidKeyHook()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "publicLockVersion()": FunctionFragment;
    "purchase(uint256[],address[],address[],address[],bytes[])": FunctionFragment;
    "purchasePriceFor(address,address,bytes)": FunctionFragment;
    "referrerFees(address)": FunctionFragment;
    "refundPenaltyBasisPoints()": FunctionFragment;
    "renewMembershipFor(uint256,address)": FunctionFragment;
    "renounceLockManager()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeKeyGranter(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "schemaVersion()": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setEventHooks(address,address,address,address,address,address,address)": FunctionFragment;
    "setGasRefundValue(uint256)": FunctionFragment;
    "setKeyManagerOf(uint256,address)": FunctionFragment;
    "setLockMetadata(string,string,string)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setReferrerFee(address,uint256)": FunctionFragment;
    "shareKey(address,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalKeys(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(uint256,address,uint256)": FunctionFragment;
    "transferFeeBasisPoints()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unlendKey(address,uint256)": FunctionFragment;
    "unlockProtocol()": FunctionFragment;
    "updateKeyPricing(uint256,address)": FunctionFragment;
    "updateLockConfig(uint256,uint256,uint256)": FunctionFragment;
    "updateRefundPenalty(uint256,uint256)": FunctionFragment;
    "updateSchemaVersion()": FunctionFragment;
    "updateTransferFee(uint256)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "KEY_GRANTER_ROLE"
      | "LOCK_MANAGER_ROLE"
      | "addKeyGranter"
      | "addLockManager"
      | "approve"
      | "balanceOf"
      | "burn"
      | "cancelAndRefund"
      | "expirationDuration"
      | "expireAndRefundFor"
      | "extend"
      | "freeTrialLength"
      | "gasRefundValue"
      | "getApproved"
      | "getCancelAndRefundValue"
      | "getHasValidKey"
      | "getRoleAdmin"
      | "getTransferFee"
      | "grantKeyExtension"
      | "grantKeys"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isApprovedForAll"
      | "isKeyGranter"
      | "isLockManager"
      | "isOwner"
      | "isValidKey"
      | "keyExpirationTimestampFor"
      | "keyManagerOf"
      | "keyPrice"
      | "lendKey"
      | "maxKeysPerAddress"
      | "maxNumberOfKeys"
      | "mergeKeys"
      | "migrate"
      | "name"
      | "numberOfOwners"
      | "onKeyCancelHook"
      | "onKeyExtendHook"
      | "onKeyGrantHook"
      | "onKeyPurchaseHook"
      | "onKeyTransferHook"
      | "onTokenURIHook"
      | "onValidKeyHook"
      | "owner"
      | "ownerOf"
      | "publicLockVersion"
      | "purchase"
      | "purchasePriceFor"
      | "referrerFees"
      | "refundPenaltyBasisPoints"
      | "renewMembershipFor"
      | "renounceLockManager"
      | "renounceRole"
      | "revokeKeyGranter"
      | "revokeRole"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "schemaVersion"
      | "setApprovalForAll"
      | "setEventHooks"
      | "setGasRefundValue"
      | "setKeyManagerOf"
      | "setLockMetadata"
      | "setOwner"
      | "setReferrerFee"
      | "shareKey"
      | "supportsInterface"
      | "symbol"
      | "tokenAddress"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalKeys"
      | "totalSupply"
      | "transfer"
      | "transferFeeBasisPoints"
      | "transferFrom"
      | "unlendKey"
      | "unlockProtocol"
      | "updateKeyPricing"
      | "updateLockConfig"
      | "updateRefundPenalty"
      | "updateSchemaVersion"
      | "updateTransferFee"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KEY_GRANTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOCK_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addKeyGranter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addLockManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAndRefund",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "expirationDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireAndRefundFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extend",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "freeTrialLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasRefundValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCancelAndRefundValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHasValidKey",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantKeyExtension",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantKeys",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isKeyGranter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isLockManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidKey",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "keyExpirationTimestampFor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "keyManagerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "keyPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lendKey",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxKeysPerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumberOfKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeKeys",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyCancelHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyExtendHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyGrantHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyPurchaseHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onKeyTransferHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenURIHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onValidKeyHook",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publicLockVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePriceFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "referrerFees",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "refundPenaltyBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewMembershipFor",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceLockManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeKeyGranter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "schemaVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventHooks",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasRefundValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeyManagerOf",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockMetadata",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerFee",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shareKey",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalKeys",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlendKey",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeyPricing",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLockConfig",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRefundPenalty",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSchemaVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransferFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KEY_GRANTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOCK_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKeyGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAndRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirationDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireAndRefundFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeTrialLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasRefundValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCancelAndRefundValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHasValidKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantKeyExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKeyGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValidKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keyExpirationTimestampFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyManagerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keyPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lendKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxKeysPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNumberOfKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mergeKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyCancelHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyExtendHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyGrantHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyPurchaseHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onKeyTransferHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenURIHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onValidKeyHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicLockVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundPenaltyBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewMembershipFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceLockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeKeyGranter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "schemaVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasRefundValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeyManagerOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlendKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeyPricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLockConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRefundPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSchemaVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CancelKey(uint256,address,address,uint256)": EventFragment;
    "ExpirationChanged(uint256,uint256,uint256,bool)": EventFragment;
    "ExpireKey(uint256)": EventFragment;
    "GasRefunded(address,uint256,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "KeyExtended(uint256,uint256)": EventFragment;
    "KeyGranterAdded(address)": EventFragment;
    "KeyGranterRemoved(address)": EventFragment;
    "KeyManagerChanged(uint256,address)": EventFragment;
    "KeysMigrated(uint256)": EventFragment;
    "LockConfig(uint256,uint256,uint256)": EventFragment;
    "LockManagerAdded(address)": EventFragment;
    "LockManagerRemoved(address)": EventFragment;
    "LockMetadata(string,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PricingChanged(uint256,uint256,address,address)": EventFragment;
    "RefundPenaltyChanged(uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferFeeChanged(uint256)": EventFragment;
    "UnlockCallFailed(address,address)": EventFragment;
    "Withdrawal(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpirationChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpireKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasRefunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyGranterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyGranterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyManagerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeysMigrated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockConfig"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockManagerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PricingChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundPenaltyChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockCallFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CancelKeyEventObject {
  tokenId: BigNumber;
  owner: string;
  sendTo: string;
  refund: BigNumber;
}
export type CancelKeyEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  CancelKeyEventObject
>;

export type CancelKeyEventFilter = TypedEventFilter<CancelKeyEvent>;

export interface ExpirationChangedEventObject {
  tokenId: BigNumber;
  newExpiration: BigNumber;
  amount: BigNumber;
  timeAdded: boolean;
}
export type ExpirationChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean],
  ExpirationChangedEventObject
>;

export type ExpirationChangedEventFilter =
  TypedEventFilter<ExpirationChangedEvent>;

export interface ExpireKeyEventObject {
  tokenId: BigNumber;
}
export type ExpireKeyEvent = TypedEvent<[BigNumber], ExpireKeyEventObject>;

export type ExpireKeyEventFilter = TypedEventFilter<ExpireKeyEvent>;

export interface GasRefundedEventObject {
  receiver: string;
  refundedAmount: BigNumber;
  tokenAddress: string;
}
export type GasRefundedEvent = TypedEvent<
  [string, BigNumber, string],
  GasRefundedEventObject
>;

export type GasRefundedEventFilter = TypedEventFilter<GasRefundedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KeyExtendedEventObject {
  tokenId: BigNumber;
  newTimestamp: BigNumber;
}
export type KeyExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  KeyExtendedEventObject
>;

export type KeyExtendedEventFilter = TypedEventFilter<KeyExtendedEvent>;

export interface KeyGranterAddedEventObject {
  account: string;
}
export type KeyGranterAddedEvent = TypedEvent<
  [string],
  KeyGranterAddedEventObject
>;

export type KeyGranterAddedEventFilter = TypedEventFilter<KeyGranterAddedEvent>;

export interface KeyGranterRemovedEventObject {
  account: string;
}
export type KeyGranterRemovedEvent = TypedEvent<
  [string],
  KeyGranterRemovedEventObject
>;

export type KeyGranterRemovedEventFilter =
  TypedEventFilter<KeyGranterRemovedEvent>;

export interface KeyManagerChangedEventObject {
  _tokenId: BigNumber;
  _newManager: string;
}
export type KeyManagerChangedEvent = TypedEvent<
  [BigNumber, string],
  KeyManagerChangedEventObject
>;

export type KeyManagerChangedEventFilter =
  TypedEventFilter<KeyManagerChangedEvent>;

export interface KeysMigratedEventObject {
  updatedRecordsCount: BigNumber;
}
export type KeysMigratedEvent = TypedEvent<
  [BigNumber],
  KeysMigratedEventObject
>;

export type KeysMigratedEventFilter = TypedEventFilter<KeysMigratedEvent>;

export interface LockConfigEventObject {
  expirationDuration: BigNumber;
  maxNumberOfKeys: BigNumber;
  maxKeysPerAcccount: BigNumber;
}
export type LockConfigEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  LockConfigEventObject
>;

export type LockConfigEventFilter = TypedEventFilter<LockConfigEvent>;

export interface LockManagerAddedEventObject {
  account: string;
}
export type LockManagerAddedEvent = TypedEvent<
  [string],
  LockManagerAddedEventObject
>;

export type LockManagerAddedEventFilter =
  TypedEventFilter<LockManagerAddedEvent>;

export interface LockManagerRemovedEventObject {
  account: string;
}
export type LockManagerRemovedEvent = TypedEvent<
  [string],
  LockManagerRemovedEventObject
>;

export type LockManagerRemovedEventFilter =
  TypedEventFilter<LockManagerRemovedEvent>;

export interface LockMetadataEventObject {
  name: string;
  symbol: string;
  baseTokenURI: string;
}
export type LockMetadataEvent = TypedEvent<
  [string, string, string],
  LockMetadataEventObject
>;

export type LockMetadataEventFilter = TypedEventFilter<LockMetadataEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PricingChangedEventObject {
  oldKeyPrice: BigNumber;
  keyPrice: BigNumber;
  oldTokenAddress: string;
  tokenAddress: string;
}
export type PricingChangedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  PricingChangedEventObject
>;

export type PricingChangedEventFilter = TypedEventFilter<PricingChangedEvent>;

export interface RefundPenaltyChangedEventObject {
  freeTrialLength: BigNumber;
  refundPenaltyBasisPoints: BigNumber;
}
export type RefundPenaltyChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RefundPenaltyChangedEventObject
>;

export type RefundPenaltyChangedEventFilter =
  TypedEventFilter<RefundPenaltyChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface TransferFeeChangedEventObject {
  transferFeeBasisPoints: BigNumber;
}
export type TransferFeeChangedEvent = TypedEvent<
  [BigNumber],
  TransferFeeChangedEventObject
>;

export type TransferFeeChangedEventFilter =
  TypedEventFilter<TransferFeeChangedEvent>;

export interface UnlockCallFailedEventObject {
  lockAddress: string;
  unlockAddress: string;
}
export type UnlockCallFailedEvent = TypedEvent<
  [string, string],
  UnlockCallFailedEventObject
>;

export type UnlockCallFailedEventFilter =
  TypedEventFilter<UnlockCallFailedEvent>;

export interface WithdrawalEventObject {
  sender: string;
  tokenAddress: string;
  recipient: string;
  amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface PublicLock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PublicLockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KEY_GRANTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LOCK_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addKeyGranter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLockManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelAndRefund(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    expirationDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    expireAndRefundFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extend(
      _value: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freeTrialLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasRefundValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _refundValue: BigNumber }>;

    getApproved(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCancelAndRefundValue(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { refund: BigNumber }>;

    getHasValidKey(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTransferFee(
      _tokenId: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantKeyExtension(
      _tokenId: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantKeys(
      _recipients: PromiseOrValue<string>[],
      _expirationTimestamps: PromiseOrValue<BigNumberish>[],
      _keyManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _lockCreator: PromiseOrValue<string>,
      _expirationDuration: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _keyPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
      _lockName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isKeyGranter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLockManager(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidKey(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keyExpirationTimestampFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    keyManagerOf(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    keyPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    lendKey(
      _from: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxKeysPerAddress(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxNumberOfKeys(overrides?: CallOverrides): Promise<[BigNumber]>;

    mergeKeys(
      _tokenIdFrom: PromiseOrValue<BigNumberish>,
      _tokenIdTo: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrate(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numberOfOwners(overrides?: CallOverrides): Promise<[BigNumber]>;

    onKeyCancelHook(overrides?: CallOverrides): Promise<[string]>;

    onKeyExtendHook(overrides?: CallOverrides): Promise<[string]>;

    onKeyGrantHook(overrides?: CallOverrides): Promise<[string]>;

    onKeyPurchaseHook(overrides?: CallOverrides): Promise<[string]>;

    onKeyTransferHook(overrides?: CallOverrides): Promise<[string]>;

    onTokenURIHook(overrides?: CallOverrides): Promise<[string]>;

    onValidKeyHook(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    publicLockVersion(overrides?: CallOverrides): Promise<[number]>;

    purchase(
      _values: PromiseOrValue<BigNumberish>[],
      _recipients: PromiseOrValue<string>[],
      _referrers: PromiseOrValue<string>[],
      _keyManagers: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    purchasePriceFor(
      _recipient: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minKeyPrice: BigNumber }>;

    referrerFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    refundPenaltyBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    renewMembershipFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceLockManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeKeyGranter(
      _granter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    schemaVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovalForAll(
      _to: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEventHooks(
      _onKeyPurchaseHook: PromiseOrValue<string>,
      _onKeyCancelHook: PromiseOrValue<string>,
      _onValidKeyHook: PromiseOrValue<string>,
      _onTokenURIHook: PromiseOrValue<string>,
      _onKeyTransferHook: PromiseOrValue<string>,
      _onKeyExtendHook: PromiseOrValue<string>,
      _onKeyGrantHook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasRefundValue(
      _refundValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeyManagerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      _keyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLockMetadata(
      _lockName: PromiseOrValue<string>,
      _lockSymbol: PromiseOrValue<string>,
      _baseTokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferrerFee(
      _referrer: PromiseOrValue<string>,
      _feeBasisPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shareKey(
      _to: PromiseOrValue<string>,
      _tokenIdFrom: PromiseOrValue<BigNumberish>,
      _timeShared: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      _keyOwner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalKeys(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _valueBasisPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlendKey(
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockProtocol(overrides?: CallOverrides): Promise<[string]>;

    updateKeyPricing(
      _keyPrice: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLockConfig(
      _newExpirationDuration: PromiseOrValue<BigNumberish>,
      _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
      _maxKeysPerAcccount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRefundPenalty(
      _freeTrialLength: PromiseOrValue<BigNumberish>,
      _refundPenaltyBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSchemaVersion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTransferFee(
      _transferFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenAddress: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  KEY_GRANTER_ROLE(overrides?: CallOverrides): Promise<string>;

  LOCK_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  addKeyGranter(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLockManager(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    _approved: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    _keyOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelAndRefund(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  expirationDuration(overrides?: CallOverrides): Promise<BigNumber>;

  expireAndRefundFor(
    _tokenId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extend(
    _value: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freeTrialLength(overrides?: CallOverrides): Promise<BigNumber>;

  gasRefundValue(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCancelAndRefundValue(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHasValidKey(
    _keyOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTransferFee(
    _tokenId: PromiseOrValue<BigNumberish>,
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantKeyExtension(
    _tokenId: PromiseOrValue<BigNumberish>,
    _duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantKeys(
    _recipients: PromiseOrValue<string>[],
    _expirationTimestamps: PromiseOrValue<BigNumberish>[],
    _keyManagers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _lockCreator: PromiseOrValue<string>,
    _expirationDuration: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    _keyPrice: PromiseOrValue<BigNumberish>,
    _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
    _lockName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    _owner: PromiseOrValue<string>,
    _operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isKeyGranter(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLockManager(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidKey(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keyExpirationTimestampFor(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  keyManagerOf(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  keyPrice(overrides?: CallOverrides): Promise<BigNumber>;

  lendKey(
    _from: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxKeysPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

  maxNumberOfKeys(overrides?: CallOverrides): Promise<BigNumber>;

  mergeKeys(
    _tokenIdFrom: PromiseOrValue<BigNumberish>,
    _tokenIdTo: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrate(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  numberOfOwners(overrides?: CallOverrides): Promise<BigNumber>;

  onKeyCancelHook(overrides?: CallOverrides): Promise<string>;

  onKeyExtendHook(overrides?: CallOverrides): Promise<string>;

  onKeyGrantHook(overrides?: CallOverrides): Promise<string>;

  onKeyPurchaseHook(overrides?: CallOverrides): Promise<string>;

  onKeyTransferHook(overrides?: CallOverrides): Promise<string>;

  onTokenURIHook(overrides?: CallOverrides): Promise<string>;

  onValidKeyHook(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  publicLockVersion(overrides?: CallOverrides): Promise<number>;

  purchase(
    _values: PromiseOrValue<BigNumberish>[],
    _recipients: PromiseOrValue<string>[],
    _referrers: PromiseOrValue<string>[],
    _keyManagers: PromiseOrValue<string>[],
    _data: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  purchasePriceFor(
    _recipient: PromiseOrValue<string>,
    _referrer: PromiseOrValue<string>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referrerFees(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  refundPenaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  renewMembershipFor(
    _tokenId: PromiseOrValue<BigNumberish>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceLockManager(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeKeyGranter(
    _granter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  schemaVersion(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovalForAll(
    _to: PromiseOrValue<string>,
    _approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEventHooks(
    _onKeyPurchaseHook: PromiseOrValue<string>,
    _onKeyCancelHook: PromiseOrValue<string>,
    _onValidKeyHook: PromiseOrValue<string>,
    _onTokenURIHook: PromiseOrValue<string>,
    _onKeyTransferHook: PromiseOrValue<string>,
    _onKeyExtendHook: PromiseOrValue<string>,
    _onKeyGrantHook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasRefundValue(
    _refundValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeyManagerOf(
    _tokenId: PromiseOrValue<BigNumberish>,
    _keyManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLockMetadata(
    _lockName: PromiseOrValue<string>,
    _lockSymbol: PromiseOrValue<string>,
    _baseTokenURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferrerFee(
    _referrer: PromiseOrValue<string>,
    _feeBasisPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shareKey(
    _to: PromiseOrValue<string>,
    _tokenIdFrom: PromiseOrValue<BigNumberish>,
    _timeShared: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    _keyOwner: PromiseOrValue<string>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalKeys(
    _keyOwner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _tokenId: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _valueBasisPoint: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    _from: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlendKey(
    _recipient: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockProtocol(overrides?: CallOverrides): Promise<string>;

  updateKeyPricing(
    _keyPrice: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLockConfig(
    _newExpirationDuration: PromiseOrValue<BigNumberish>,
    _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
    _maxKeysPerAcccount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRefundPenalty(
    _freeTrialLength: PromiseOrValue<BigNumberish>,
    _refundPenaltyBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSchemaVersion(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTransferFee(
    _transferFeeBasisPoints: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenAddress: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    KEY_GRANTER_ROLE(overrides?: CallOverrides): Promise<string>;

    LOCK_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    addKeyGranter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLockManager(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAndRefund(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    expirationDuration(overrides?: CallOverrides): Promise<BigNumber>;

    expireAndRefundFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    extend(
      _value: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    freeTrialLength(overrides?: CallOverrides): Promise<BigNumber>;

    gasRefundValue(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCancelAndRefundValue(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHasValidKey(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTransferFee(
      _tokenId: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantKeyExtension(
      _tokenId: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantKeys(
      _recipients: PromiseOrValue<string>[],
      _expirationTimestamps: PromiseOrValue<BigNumberish>[],
      _keyManagers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _lockCreator: PromiseOrValue<string>,
      _expirationDuration: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _keyPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
      _lockName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isKeyGranter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLockManager(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidKey(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keyExpirationTimestampFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyManagerOf(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    keyPrice(overrides?: CallOverrides): Promise<BigNumber>;

    lendKey(
      _from: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxKeysPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxNumberOfKeys(overrides?: CallOverrides): Promise<BigNumber>;

    mergeKeys(
      _tokenIdFrom: PromiseOrValue<BigNumberish>,
      _tokenIdTo: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    migrate(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    numberOfOwners(overrides?: CallOverrides): Promise<BigNumber>;

    onKeyCancelHook(overrides?: CallOverrides): Promise<string>;

    onKeyExtendHook(overrides?: CallOverrides): Promise<string>;

    onKeyGrantHook(overrides?: CallOverrides): Promise<string>;

    onKeyPurchaseHook(overrides?: CallOverrides): Promise<string>;

    onKeyTransferHook(overrides?: CallOverrides): Promise<string>;

    onTokenURIHook(overrides?: CallOverrides): Promise<string>;

    onValidKeyHook(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    publicLockVersion(overrides?: CallOverrides): Promise<number>;

    purchase(
      _values: PromiseOrValue<BigNumberish>[],
      _recipients: PromiseOrValue<string>[],
      _referrers: PromiseOrValue<string>[],
      _keyManagers: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    purchasePriceFor(
      _recipient: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundPenaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    renewMembershipFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceLockManager(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeKeyGranter(
      _granter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    schemaVersion(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      _to: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEventHooks(
      _onKeyPurchaseHook: PromiseOrValue<string>,
      _onKeyCancelHook: PromiseOrValue<string>,
      _onValidKeyHook: PromiseOrValue<string>,
      _onTokenURIHook: PromiseOrValue<string>,
      _onKeyTransferHook: PromiseOrValue<string>,
      _onKeyExtendHook: PromiseOrValue<string>,
      _onKeyGrantHook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasRefundValue(
      _refundValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeyManagerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      _keyManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockMetadata(
      _lockName: PromiseOrValue<string>,
      _lockSymbol: PromiseOrValue<string>,
      _baseTokenURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferrerFee(
      _referrer: PromiseOrValue<string>,
      _feeBasisPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shareKey(
      _to: PromiseOrValue<string>,
      _tokenIdFrom: PromiseOrValue<BigNumberish>,
      _timeShared: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _keyOwner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalKeys(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _valueBasisPoint: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlendKey(
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockProtocol(overrides?: CallOverrides): Promise<string>;

    updateKeyPricing(
      _keyPrice: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLockConfig(
      _newExpirationDuration: PromiseOrValue<BigNumberish>,
      _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
      _maxKeysPerAcccount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRefundPenalty(
      _freeTrialLength: PromiseOrValue<BigNumberish>,
      _refundPenaltyBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSchemaVersion(overrides?: CallOverrides): Promise<void>;

    updateTransferFee(
      _transferFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenAddress: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CancelKey(uint256,address,address,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      sendTo?: PromiseOrValue<string> | null,
      refund?: null
    ): CancelKeyEventFilter;
    CancelKey(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null,
      sendTo?: PromiseOrValue<string> | null,
      refund?: null
    ): CancelKeyEventFilter;

    "ExpirationChanged(uint256,uint256,uint256,bool)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newExpiration?: null,
      amount?: null,
      timeAdded?: null
    ): ExpirationChangedEventFilter;
    ExpirationChanged(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newExpiration?: null,
      amount?: null,
      timeAdded?: null
    ): ExpirationChangedEventFilter;

    "ExpireKey(uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ExpireKeyEventFilter;
    ExpireKey(
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ExpireKeyEventFilter;

    "GasRefunded(address,uint256,address)"(
      receiver?: PromiseOrValue<string> | null,
      refundedAmount?: null,
      tokenAddress?: null
    ): GasRefundedEventFilter;
    GasRefunded(
      receiver?: PromiseOrValue<string> | null,
      refundedAmount?: null,
      tokenAddress?: null
    ): GasRefundedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KeyExtended(uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newTimestamp?: null
    ): KeyExtendedEventFilter;
    KeyExtended(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newTimestamp?: null
    ): KeyExtendedEventFilter;

    "KeyGranterAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): KeyGranterAddedEventFilter;
    KeyGranterAdded(
      account?: PromiseOrValue<string> | null
    ): KeyGranterAddedEventFilter;

    "KeyGranterRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): KeyGranterRemovedEventFilter;
    KeyGranterRemoved(
      account?: PromiseOrValue<string> | null
    ): KeyGranterRemovedEventFilter;

    "KeyManagerChanged(uint256,address)"(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _newManager?: PromiseOrValue<string> | null
    ): KeyManagerChangedEventFilter;
    KeyManagerChanged(
      _tokenId?: PromiseOrValue<BigNumberish> | null,
      _newManager?: PromiseOrValue<string> | null
    ): KeyManagerChangedEventFilter;

    "KeysMigrated(uint256)"(
      updatedRecordsCount?: null
    ): KeysMigratedEventFilter;
    KeysMigrated(updatedRecordsCount?: null): KeysMigratedEventFilter;

    "LockConfig(uint256,uint256,uint256)"(
      expirationDuration?: null,
      maxNumberOfKeys?: null,
      maxKeysPerAcccount?: null
    ): LockConfigEventFilter;
    LockConfig(
      expirationDuration?: null,
      maxNumberOfKeys?: null,
      maxKeysPerAcccount?: null
    ): LockConfigEventFilter;

    "LockManagerAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): LockManagerAddedEventFilter;
    LockManagerAdded(
      account?: PromiseOrValue<string> | null
    ): LockManagerAddedEventFilter;

    "LockManagerRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): LockManagerRemovedEventFilter;
    LockManagerRemoved(
      account?: PromiseOrValue<string> | null
    ): LockManagerRemovedEventFilter;

    "LockMetadata(string,string,string)"(
      name?: null,
      symbol?: null,
      baseTokenURI?: null
    ): LockMetadataEventFilter;
    LockMetadata(
      name?: null,
      symbol?: null,
      baseTokenURI?: null
    ): LockMetadataEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: null,
      newOwner?: null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: null,
      newOwner?: null
    ): OwnershipTransferredEventFilter;

    "PricingChanged(uint256,uint256,address,address)"(
      oldKeyPrice?: null,
      keyPrice?: null,
      oldTokenAddress?: null,
      tokenAddress?: null
    ): PricingChangedEventFilter;
    PricingChanged(
      oldKeyPrice?: null,
      keyPrice?: null,
      oldTokenAddress?: null,
      tokenAddress?: null
    ): PricingChangedEventFilter;

    "RefundPenaltyChanged(uint256,uint256)"(
      freeTrialLength?: null,
      refundPenaltyBasisPoints?: null
    ): RefundPenaltyChangedEventFilter;
    RefundPenaltyChanged(
      freeTrialLength?: null,
      refundPenaltyBasisPoints?: null
    ): RefundPenaltyChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "TransferFeeChanged(uint256)"(
      transferFeeBasisPoints?: null
    ): TransferFeeChangedEventFilter;
    TransferFeeChanged(
      transferFeeBasisPoints?: null
    ): TransferFeeChangedEventFilter;

    "UnlockCallFailed(address,address)"(
      lockAddress?: PromiseOrValue<string> | null,
      unlockAddress?: null
    ): UnlockCallFailedEventFilter;
    UnlockCallFailed(
      lockAddress?: PromiseOrValue<string> | null,
      unlockAddress?: null
    ): UnlockCallFailedEventFilter;

    "Withdrawal(address,address,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      sender?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KEY_GRANTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addKeyGranter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLockManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelAndRefund(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    expirationDuration(overrides?: CallOverrides): Promise<BigNumber>;

    expireAndRefundFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extend(
      _value: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freeTrialLength(overrides?: CallOverrides): Promise<BigNumber>;

    gasRefundValue(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCancelAndRefundValue(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHasValidKey(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransferFee(
      _tokenId: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantKeyExtension(
      _tokenId: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantKeys(
      _recipients: PromiseOrValue<string>[],
      _expirationTimestamps: PromiseOrValue<BigNumberish>[],
      _keyManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _lockCreator: PromiseOrValue<string>,
      _expirationDuration: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _keyPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
      _lockName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isKeyGranter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLockManager(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidKey(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyExpirationTimestampFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyManagerOf(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyPrice(overrides?: CallOverrides): Promise<BigNumber>;

    lendKey(
      _from: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxKeysPerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    maxNumberOfKeys(overrides?: CallOverrides): Promise<BigNumber>;

    mergeKeys(
      _tokenIdFrom: PromiseOrValue<BigNumberish>,
      _tokenIdTo: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrate(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfOwners(overrides?: CallOverrides): Promise<BigNumber>;

    onKeyCancelHook(overrides?: CallOverrides): Promise<BigNumber>;

    onKeyExtendHook(overrides?: CallOverrides): Promise<BigNumber>;

    onKeyGrantHook(overrides?: CallOverrides): Promise<BigNumber>;

    onKeyPurchaseHook(overrides?: CallOverrides): Promise<BigNumber>;

    onKeyTransferHook(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenURIHook(overrides?: CallOverrides): Promise<BigNumber>;

    onValidKeyHook(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicLockVersion(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      _values: PromiseOrValue<BigNumberish>[],
      _recipients: PromiseOrValue<string>[],
      _referrers: PromiseOrValue<string>[],
      _keyManagers: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    purchasePriceFor(
      _recipient: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrerFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refundPenaltyBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    renewMembershipFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceLockManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeKeyGranter(
      _granter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    schemaVersion(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      _to: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEventHooks(
      _onKeyPurchaseHook: PromiseOrValue<string>,
      _onKeyCancelHook: PromiseOrValue<string>,
      _onValidKeyHook: PromiseOrValue<string>,
      _onTokenURIHook: PromiseOrValue<string>,
      _onKeyTransferHook: PromiseOrValue<string>,
      _onKeyExtendHook: PromiseOrValue<string>,
      _onKeyGrantHook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasRefundValue(
      _refundValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeyManagerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      _keyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLockMetadata(
      _lockName: PromiseOrValue<string>,
      _lockSymbol: PromiseOrValue<string>,
      _baseTokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferrerFee(
      _referrer: PromiseOrValue<string>,
      _feeBasisPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shareKey(
      _to: PromiseOrValue<string>,
      _tokenIdFrom: PromiseOrValue<BigNumberish>,
      _timeShared: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      _keyOwner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalKeys(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _valueBasisPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlendKey(
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockProtocol(overrides?: CallOverrides): Promise<BigNumber>;

    updateKeyPricing(
      _keyPrice: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLockConfig(
      _newExpirationDuration: PromiseOrValue<BigNumberish>,
      _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
      _maxKeysPerAcccount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRefundPenalty(
      _freeTrialLength: PromiseOrValue<BigNumberish>,
      _refundPenaltyBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSchemaVersion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTransferFee(
      _transferFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenAddress: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KEY_GRANTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addKeyGranter(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLockManager(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _approved: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelAndRefund(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    expirationDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expireAndRefundFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extend(
      _value: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freeTrialLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasRefundValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCancelAndRefundValue(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHasValidKey(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransferFee(
      _tokenId: PromiseOrValue<BigNumberish>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantKeyExtension(
      _tokenId: PromiseOrValue<BigNumberish>,
      _duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantKeys(
      _recipients: PromiseOrValue<string>[],
      _expirationTimestamps: PromiseOrValue<BigNumberish>[],
      _keyManagers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _lockCreator: PromiseOrValue<string>,
      _expirationDuration: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      _keyPrice: PromiseOrValue<BigNumberish>,
      _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
      _lockName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: PromiseOrValue<string>,
      _operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKeyGranter(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLockManager(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidKey(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyExpirationTimestampFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyManagerOf(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendKey(
      _from: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxKeysPerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxNumberOfKeys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mergeKeys(
      _tokenIdFrom: PromiseOrValue<BigNumberish>,
      _tokenIdTo: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onKeyCancelHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onKeyExtendHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onKeyGrantHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onKeyPurchaseHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onKeyTransferHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenURIHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onValidKeyHook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicLockVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      _values: PromiseOrValue<BigNumberish>[],
      _recipients: PromiseOrValue<string>[],
      _referrers: PromiseOrValue<string>[],
      _keyManagers: PromiseOrValue<string>[],
      _data: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    purchasePriceFor(
      _recipient: PromiseOrValue<string>,
      _referrer: PromiseOrValue<string>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrerFees(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundPenaltyBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renewMembershipFor(
      _tokenId: PromiseOrValue<BigNumberish>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceLockManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeKeyGranter(
      _granter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    schemaVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _to: PromiseOrValue<string>,
      _approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEventHooks(
      _onKeyPurchaseHook: PromiseOrValue<string>,
      _onKeyCancelHook: PromiseOrValue<string>,
      _onValidKeyHook: PromiseOrValue<string>,
      _onTokenURIHook: PromiseOrValue<string>,
      _onKeyTransferHook: PromiseOrValue<string>,
      _onKeyExtendHook: PromiseOrValue<string>,
      _onKeyGrantHook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasRefundValue(
      _refundValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeyManagerOf(
      _tokenId: PromiseOrValue<BigNumberish>,
      _keyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLockMetadata(
      _lockName: PromiseOrValue<string>,
      _lockSymbol: PromiseOrValue<string>,
      _baseTokenURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferrerFee(
      _referrer: PromiseOrValue<string>,
      _feeBasisPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shareKey(
      _to: PromiseOrValue<string>,
      _tokenIdFrom: PromiseOrValue<BigNumberish>,
      _timeShared: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      _keyOwner: PromiseOrValue<string>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalKeys(
      _keyOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _tokenId: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _valueBasisPoint: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlendKey(
      _recipient: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockProtocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateKeyPricing(
      _keyPrice: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLockConfig(
      _newExpirationDuration: PromiseOrValue<BigNumberish>,
      _maxNumberOfKeys: PromiseOrValue<BigNumberish>,
      _maxKeysPerAcccount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRefundPenalty(
      _freeTrialLength: PromiseOrValue<BigNumberish>,
      _refundPenaltyBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSchemaVersion(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTransferFee(
      _transferFeeBasisPoints: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAddress: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
